import { type EventsControllerState, type PublicStateControllerState, type ThemeControllerState, type ModalControllerState, type ConnectedWalletInfo, type RouterControllerState, type ChainAdapter, type SdkVersion, type UseAppKitAccountReturn, type UseAppKitNetworkReturn, type ConnectorType, type Provider } from '@reown/appkit-core';
import { AccountController, BlockchainApiController, ConnectionController, ConnectorController, ChainController, EnsController, OptionsController, AssetUtil } from '@reown/appkit-core';
import { type CaipNetwork, type ChainNamespace } from '@reown/appkit-common';
import type { AppKitOptions } from './utils/TypesUtil.js';
import { UniversalAdapter as UniversalAdapterClient } from './universal-adapter/client.js';
import { type W3mFrameTypes } from '@reown/appkit-wallet';
import type { AppKitNetwork } from '@reown/appkit/networks';
import type { AdapterBlueprint } from './adapters/ChainAdapterBlueprint.js';
import UniversalProvider from '@walletconnect/universal-provider';
declare global {
    interface Window {
        ethereum?: Record<string, unknown>;
    }
}
export { AccountController };
export interface OpenOptions {
    view: 'Account' | 'Connect' | 'Networks' | 'ApproveTransaction' | 'OnRampProviders';
}
type Adapters = Record<ChainNamespace, AdapterBlueprint>;
export declare class AppKit {
    private static instance?;
    activeAdapter?: AdapterBlueprint;
    options: AppKitOptions;
    adapters?: ChainAdapter[];
    activeChainNamespace?: ChainNamespace;
    chainNamespaces: ChainNamespace[];
    chainAdapters?: Adapters;
    universalAdapter?: UniversalAdapterClient;
    private universalProvider?;
    private connectionControllerClient?;
    private networkControllerClient?;
    private universalProviderInitPromise?;
    private authProvider?;
    private initPromise?;
    version?: SdkVersion;
    adapter?: ChainAdapter;
    private caipNetworks?;
    private defaultCaipNetwork?;
    constructor(options: AppKitOptions & {
        adapters?: ChainAdapter[];
    } & {
        sdkVersion: SdkVersion;
    });
    static getInstance(): AppKit | undefined;
    private initialize;
    open(options?: OpenOptions): Promise<void>;
    close(): Promise<void>;
    setLoading(loading: ModalControllerState['loading']): void;
    getError(): string;
    getChainId(): string | number | undefined;
    switchNetwork(appKitNetwork: AppKitNetwork): void;
    getWalletProvider(): unknown;
    getWalletProviderType(): ConnectorType | null | undefined;
    subscribeProvider(): null;
    getThemeMode(): import("@reown/appkit-core").ThemeMode;
    getThemeVariables(): import("@reown/appkit-core").ThemeVariables;
    setThemeMode(themeMode: ThemeControllerState['themeMode']): void;
    setThemeVariables(themeVariables: ThemeControllerState['themeVariables']): void;
    subscribeTheme(callback: (newState: ThemeControllerState) => void): () => void;
    getWalletInfo(): ConnectedWalletInfo;
    subscribeAccount(callback: (newState: UseAppKitAccountReturn) => void): void;
    subscribeNetwork(callback: (newState: Omit<UseAppKitNetworkReturn, 'switchNetwork'>) => void): () => void;
    subscribeWalletInfo(callback: (newState: ConnectedWalletInfo) => void): () => void;
    subscribeShouldUpdateToAddress(callback: (newState?: string) => void): void;
    subscribeCaipNetworkChange(callback: (newState?: CaipNetwork) => void): void;
    getState(): PublicStateControllerState;
    subscribeState(callback: (newState: PublicStateControllerState) => void): () => void;
    showErrorMessage(message: string): void;
    showSuccessMessage(message: string): void;
    getEvent(): {
        timestamp: number;
        data: import("@reown/appkit-core").Event;
    };
    subscribeEvents(callback: (newEvent: EventsControllerState) => void): () => void;
    replace(route: RouterControllerState['view']): void;
    redirect(route: RouterControllerState['view']): void;
    popTransactionStack(cancel?: boolean): void;
    isOpen(): boolean;
    isTransactionStackEmpty(): boolean;
    isTransactionShouldReplaceView(): boolean | undefined;
    setStatus: (typeof AccountController)['setStatus'];
    getIsConnectedState: () => boolean;
    setAllAccounts: (typeof AccountController)['setAllAccounts'];
    addAddressLabel: (typeof AccountController)['addAddressLabel'];
    removeAddressLabel: (typeof AccountController)['removeAddressLabel'];
    getCaipAddress: (chainNamespace?: ChainNamespace) => `eip155:${string}:${string}` | `eip155:${number}:${string}` | `solana:${string}:${string}` | `solana:${number}:${string}` | `polkadot:${string}:${string}` | `polkadot:${number}:${string}` | undefined;
    getAddressByChainNamespace: (chainNamespace: ChainNamespace) => string | undefined;
    getAddress: (chainNamespace?: ChainNamespace) => string | undefined;
    getProvider: () => Provider | UniversalProvider | import("@reown/appkit-core").CombinedProvider | undefined;
    getPreferredAccountType: () => W3mFrameTypes.AccountType;
    setCaipAddress: (typeof AccountController)['setCaipAddress'];
    setProvider: (typeof AccountController)['setProvider'];
    setBalance: (typeof AccountController)['setBalance'];
    setProfileName: (typeof AccountController)['setProfileName'];
    setProfileImage: (typeof AccountController)['setProfileImage'];
    resetAccount: (typeof AccountController)['resetAccount'];
    setCaipNetwork: (typeof ChainController)['setActiveCaipNetwork'];
    getCaipNetwork: (chainNamespace?: ChainNamespace) => CaipNetwork | undefined;
    getCaipNetworkId: <T extends string | number>() => T | undefined;
    getCaipNetworks: (namespace: ChainNamespace) => CaipNetwork[];
    getActiveChainNamespace: () => ChainNamespace | undefined;
    setRequestedCaipNetworks: (typeof ChainController)['setRequestedCaipNetworks'];
    getApprovedCaipNetworkIds: (typeof ChainController)['getAllApprovedCaipNetworkIds'];
    setApprovedCaipNetworksData: (typeof ChainController)['setApprovedCaipNetworksData'];
    resetNetwork: (typeof ChainController)['resetNetwork'];
    setConnectors: (typeof ConnectorController)['setConnectors'];
    addConnector: (typeof ConnectorController)['addConnector'];
    getConnectors: (typeof ConnectorController)['getConnectors'];
    resetWcConnection: (typeof ConnectionController)['resetWcConnection'];
    fetchIdentity: (typeof BlockchainApiController)['fetchIdentity'];
    setAddressExplorerUrl: (typeof AccountController)['setAddressExplorerUrl'];
    setSmartAccountDeployed: (typeof AccountController)['setSmartAccountDeployed'];
    setConnectedWalletInfo: (typeof AccountController)['setConnectedWalletInfo'];
    setSmartAccountEnabledNetworks: (typeof ChainController)['setSmartAccountEnabledNetworks'];
    setPreferredAccountType: (typeof AccountController)['setPreferredAccountType'];
    getReownName: (typeof EnsController)['getNamesForAddress'];
    setEIP6963Enabled: (typeof OptionsController)['setEIP6963Enabled'];
    setClientId: (typeof BlockchainApiController)['setClientId'];
    getConnectorImage: (typeof AssetUtil)['getConnectorImage'];
    handleUnsafeRPCRequest: () => void;
    disconnect(): Promise<void>;
    private initControllers;
    private getDefaultMetaData;
    private extendCaipNetworks;
    private extendDefaultCaipNetwork;
    private createClients;
    private handleDisconnect;
    private listenAuthConnector;
    private listenWalletConnect;
    private listenAdapter;
    private getChainsFromNamespaces;
    private syncWalletConnectAccount;
    private syncWalletConnectAccounts;
    private syncProvider;
    private syncAccount;
    private syncConnectedWalletInfo;
    private syncIdentity;
    private syncReownName;
    private syncRequestedNetworks;
    private syncExistingConnection;
    private getAdapter;
    private createUniversalProvider;
    private initializeUniversalAdapter;
    getUniversalProvider(): Promise<UniversalProvider | undefined>;
    private createAuthProvider;
    private createAdapters;
    private initChainAdapters;
    private setDefaultNetwork;
    private initOrContinue;
}
